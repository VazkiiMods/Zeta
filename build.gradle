plugins {
    id "java-library"
    id "maven-publish"
    id "idea"
    id "net.neoforged.moddev" version "${mdg_version}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

version = mod_version
group = mod_group_id
base.archivesName = mod_name

neoForge {
    version = neoforge_version

    def parchmentVersion = parchment_mappings_version;
    if (parchmentVersion != "none") {
        parchment {
            minecraftVersion = parchment_minecraft_version
            mappingsVersion = parchmentVersion
        }
    }

    runs {
        client {
            client()
        }

        server {
            server()
            gameDirectory = project.file("run/server")
            programArgument "--nogui"
        }

        configureEach {
            systemProperty "forge.logging.markers", "REGISTRIES"
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

configurations {
    runtimeClasspath.extendsFrom localRuntimeOnly
}

repositories {
    maven {
        url = "https://maven.blamejared.com"
        content {
            includeGroup "mezz.jei"
        }
    }
}

dependencies {
    // compile against the JEI API but do not include it at runtime
    compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
    // at runtime, use the full JEI jar for NeoForge
    localRuntimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neoforge_version       : neoforge_version,
            mod_version            : mod_version,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_issue_tracker      : mod_issue_tracker,
            mod_license            : mod_license,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8" // Use the UTF-8 charset for Java compilation
}

java {
    withSourcesJar()
}

publishing {
    publications {
        register("mavenJava", MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}



// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
